#!/bin/bash

# '-e' Abort the script when an error occures.
# '-f' To ensure that globbing is globally disabled.
# '+x' To ensure debug mode is never enabled (prevents the password from leaking).
# '-o pipefail' To ensure that the return code of a pipeline is the value of the last command to exit with a non-zero status.
#     Needed for the `Copy` function.
set -ef +x -o pipefail

# Loads all the necessary configurations.
LoadConfigurations(){
   # Detect the config file.
   configLocation="$HOME/.config/bashpass"
   config="$configLocation/bashpass.conf"

   [[ -f ${config} ]] || Kill "config file not found." "2"

   # Get the necessary configurations from the configuration file.
   email="$(grep "email" "$config" | cut -d" " -f2)"
   passLocation="$HOME/$(grep "location" "$config" | cut -d" " -f2)"
   version="$(grep "version" "$config" | cut -d" " -f2)"
   timer="$(grep "timer" "$config" | cut -d" " -f2)"
   passLength="$(grep "length" "$config" | cut -d" " -f2)"
}

# Print out the error that occurred and exit (with the correct exit code) afterwards.
Kill() {
   printf "\n"
   printf "An error occurred: %s" "${1}"
   printf "\n"
   exit "${2}"
}

# Return the latest version using the GitHub API.
GetLatestVersion() {
   curl --silent "https://api.github.com/repos/AntonVanAssche/BashPass/releases/latest" | # Get latest release from GitHub api
   grep '"tag_name":' |                                            # Get tag line
   sed -E 's/.*"([^"]+)".*/\1/'                                    # Pluck JSON value
}

# Return all possible options/usages of BashPass. 
Help() {
   cat << EOF
BashPass version: ${version}
A password manager written in Bash.

bashpass [option] [name]                      - Basic command structure.

Options:
--help       or -h                            - Show this help message.
--version    or -v                            - Show the version number
--add        or -a                     [name] - Add a password.
--update     or -u                     [name] - Update a password.
--delete     or -d                     [name] - Delete a password.
--show       or -s                     [name] - Show a password.
--copy       or -c                     [name] - Copy a password to the clipboard.
--list       or -l                            - List all password.
--sync       or -S                     [name] - Synchronize a password with a other device on your local network.
EOF
}

# Return the current verion of BashPass.
Version() {
   printf "BashPass version: %s" "${version}"
}

# Function to ask for a name.
Name() {
   name="${1}"
   function=${2}

   if [[ -z "${name}" ]]; then
      printf "Enter the name of the password you want to %s: " "${function}"
      read -r name
   fi
}

# Check whether the given password exists.
PasswordExists() {
   name="${1}"

   if [[ ! -f "${passLocation}/${name}.gpg" ]]; then
      Kill "password '${name}' doesn't exist." "1"
   fi
}

# Ask the user whether to overwrite an existing password or not.
PasswordAlreadyExists() {
   while [[ -f ${passLocation}/${name}.gpg ]]; do
      printf "A password with the name %s already exists." "'${name}'"
      printf "\n"
      printf "Do you want to overwrite the existing password [y/N]: "
      read -r overwrite
      
      case "${overwrite}" in
         [Yy])
            rm -rf "${passLocation}/${name}.gpg"
            ;;
         *)
            printf "Enter a new name: "
            read -r name
            ;;
      esac
   done
}

# Ask the user whether he would like to generate a password or to enter one himself.
RandomPassword() {
   printf "Do you want to generate a password [Y/n]: "
   read -r random

   case "${random}" in
      [Nn])
         printf "Enter a password: "
         read -rs password1
         printf "\n"

         printf "Enter the password again: "
         read -rs password2
         printf "\n"
         
         while [[ "${password1}" != "${password2}" ]]; do
            printf "Passwords ditn't match, please try again: "
            read -rs password2
            printf "\n"
         done

         password=${password1}
         ;;
      *)
         printf "Give the length of the password (Default: %s): " "${passLength}"
         read -r length

         if [[ -z ${length} ]]; then
            length=${passLength}
         fi

         # Generate a password using '/dev/urandom'.
         # Call the 'tr' command to translate the password to a character set.
         password=$(</dev/urandom tr -dc '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%*()?.,/+-abcdefghijklmnopqrstuvwxyz' | head -c "${length}"; printf "")
         ;;
   esac

   [[ -z "$password" ]] && Kill "failed to set a password" "1"

   # Write password to the 'password' file.
   printf "%s" "${password}" > "${passLocation}/${name}"
}

# Add a new password.
Add() {
   # Ask for a name when no name was given using ${2}.
   Name "${1}" "add"

   [[ -z "${name}" ]] && Kill "failed to set a name" "1"

   # Check if a password with the chosen name already exists.
   PasswordAlreadyExists

   # Ask if the user want to generate a random password.
   RandomPassword

   # Encrypte the password file using gpg.
   gpg --encrypt --output "${passLocation}/${name}.gpg" --recipient "${email}" "${passLocation}/${name}"  &> /dev/null

   printf "Password %s has been successfully saved" "'${name}'"
   printf "\n"

   # Remove the Decrypted password file after reading
   # to prevent the password from being leaked afterwards.
   # ':?' to ensure this never expands to '/*'
   rm -rf "${passLocation:?}/${name}"
}

# Update an existing password.
Update() {
   # Ask for a name when no name was given using ${2}.
   Name "${1}" "update"
   PasswordExists "${name}"

   # Decrypte the password file.
   gpg --decrypt --output "${passLocation}/${name}" "${passLocation}/${name}.gpg" &> /dev/null

   # Ask if the user want to generate a random password.
   RandomPassword

   # Remove the ecrypted password file to prevent gpg from asking to overwrite.
   rm -rf "${passLocation:?}/${name}.gpg"

   # Encrypte the password file using gpg.
   gpg --encrypt --output "${passLocation}/${name}.gpg" --recipient "${email}" "${passLocation}/${name}"  &> /dev/null

   printf "Password %s has successfully been updated" "'${name}'"
   printf "\n"

   # Remove the Decrypted password file after reading
   # to prevent the password from being leaked afterwards.
   # ':?' to ensure this never expands to '/*'
   rm -rf "${passLocation:?}/${name}"
}

# Delete an existing password.
Delete() {
   # Ask for a name when no name was given using ${2}.
   Name "${1}" "delete"
   PasswordExists "${name}"

   rm -rf "${passLocation}/${name}.gpg"
   printf "Password %s has successfully been deleted" "'${name}'"
   printf "\n"
}

# Print the password that was given. 
Show() {
   # Ask for a name when no name was given using ${2}.
   Name "${1}" "show"
   PasswordExists "${name}"

   # Decrypte the password file and show the password
   printf "Password: %s" "$(gpg -dq "${passLocation}/${name}.gpg")"
   printf "\n"
}

# Copy the password that was given to the clipboard.
# Clear the clipboard afterwards.
Copy() {
   # Detect 'xclip'
   command -v xclip &> /dev/null || Kill "xclip is required" "127"

   # Ask for a name when no name was given using ${2}.
   Name "${1}" "copy"
   PasswordExists "${name}"

   # Decrypte the password file and copy it to the clipboard using xclip.
   # This WON'T show the password inside the terminal output.
   if ! printf "%s" "$(gpg -dq "${passLocation}/${name}.gpg")" | xclip -selection clipboard; then
      xclip -selection clipboard < /dev/null
      Kill "failed to copy password '${name}' to the clipboard." "1"
   fi

   printf "Password %s has been copied to the clipboard" "'${name}'"
   printf "\n"
   
   # Wait for the timer to end clear the clipboard.
   # 'timer' can be changed in the config file.
   sleep "${timer}" || kill 0
   xclip -selection clipboard < /dev/null
   
   printf "Clipboard has been cleared to ensure it cannot be leaked."
   printf "\n"
}

# Return a list of all the passwords that are stored on your machine.
List() {
   ls -1 "${passLocation}"
}

# Copy a password to another device  on your local network using 'ssh' and 'scp'.
# Export the 'gpg' keys to that device.
Sync() {
   # Detect 'ssh' and 'scp'
   command -v ssh &> /dev/null || Kill "ssh is required" "127"
   command -v scp &> /dev/null || Kill "scp is required" "127"

   Name "${1}" "synchronize"
   PasswordExists "${name}"
  
   printf "Enter the username of the user on the other device: "
   read -r username
   printf "Enter the local IP address of the other device: "
   read -r localIP
   
   scp "${passLocation}/${name}.gpg" "${username}"@"${localIP}":~/.local/share/bashpass/

   printf "\n"
   printf "Be aware you'll need to import your GPG key on the other device as well."
   printf "\n"
   printf "Do you want to do this now [Y/n]? "
   read -r keyExport

   case "${keyExport}" in
      [Nn])
         printf "You will have to manually export your keys to the other device if you haven't done so."
         ;;
      *)
         gpg --list-keys
         printf "Enter your key ID (Example: VEB8K7W2O3OOOBEREODILJ4DH046253LB68CXK21): "
         read -r keyID

         gpg --armor --export "${keyID}" | ssh "${username}"@"${localIP}" gpg --batch --import - || Kill "Failed to import the public key." "1"
         gpg --armor --export-secret-key "${keyID}" | ssh "${username}"@"${localIP}" gpg --batch --allow-secret-key-import --import - || Kill "Failed to import the private key." "1"
         ;;   
   esac
}

Main() {
   # Detect the user.
   # When the user is root exit out.
   [[ "$UID" == 0 ]] && Kill "permission denied" "13"

   # Load all the necessary configurations.
   LoadConfigurations
   
   # Create the necessary directories if they doesn't exists.
   mkdir -p "${passLocation}"

   # Show the user when a new version is availble. 
   [[ "$(GetLatestVersion)" == "${version}" ]] || printf "There is a new version available.\n"

   # Detect 'gpg'
   command -v gpg &> /dev/null || Kill "gpg is required" "127"

   # Ask the e-email address to encrypt when it can't be found in the config file.
   if [[ -z ${email} ]]; then
      printf "Enter the email address you created the gpg key with: "
      read -r email
      printf "email: %s" "${email}" >> "${config}"
   fi

   case "${1}" in
      "--help"| "-h") Help;;
      "--version"| "-v") Version;;
      "--add"| "-a") Add "${2}";;
      "--update"| "-u") Update "${2}";;
      "--delete"| "-d") Delete "${2}";;
      "--show"| "-s") Show "${2}";;
      "--copy"| "-c") Copy "${2}";;
      "--list"| "-l") List;;
      "--sync"| "-S") Sync "${2}";;
      *) Kill "option '${1}' not found" "22";;
   esac
}

# Check if an argument '${1}' is given.
if [[ "${1}" ]]; then
   Main "${@}"
else
   Help
fi
